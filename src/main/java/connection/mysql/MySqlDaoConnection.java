package connection.mysql;


import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public abstract class MySqlDaoConnection implements Connection {

    private static final Logger log = LogManager.getLogger(MySqlDaoConnection.class.getName());
    private Connection connection;
    private boolean isInTransaction;

    MySqlDaoConnection(Connection connection) {
        this.connection = connection;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
        try {
            return connection.prepareStatement(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            log.log(Level.ERROR, "Can't prepare statement with auto generated keys " + e);
            throw new RuntimeException("Can't prepare statement with auto generated keys", e);
        }

    }

    @Override
    public PreparedStatement prepareStatement(String sql) {
        try {
            return connection.prepareStatement(sql);
        } catch (SQLException e) {
            log.log(Level.ERROR, "Can't prepare statement " + e);
            throw new RuntimeException("Can't prepare statement ", e);
        }
    }

    @Override
    public Statement createStatement() {
        try {
            return connection.createStatement();
        } catch (SQLException e) {
            log.log(Level.ERROR, "Can't create statement " + e);
            throw new RuntimeException("Can't create statement", e);
        }
    }


    public void setIsInTransaction(boolean isInTransaction) {
        this.isInTransaction = isInTransaction;
        try {
            connection.setAutoCommit(!isInTransaction);
        } catch (SQLException e) {
            log.log(Level.ERROR, "Can't set is-in-transaction " + e);
            throw new RuntimeException("Can't set is-in-transaction", e);
        }
    }

    @Override
    public void commit() {
        if (!isInTransaction) {

            throw new RuntimeException("Can't commit: Is not in transaction");
        }
        try {
            connection.commit();
        } catch (SQLException e) {
            log.log(Level.ERROR, "Can't commit " + e);
            throw new RuntimeException("Can't commit", e);
        }
    }

    @Override
    public void rollback() {
        if (!isInTransaction) {
            throw new RuntimeException("Can't rollback: Is not in transaction");
        }
        try {
            connection.rollback();
        } catch (SQLException e) {
            log.log(Level.ERROR, "Can't rollback " + e);
            throw new RuntimeException("Can't rollback", e);
        }
    }

    @Override
    public void close() {
        try {
            if (!isInTransaction) {
                connection.close();
            }
        } catch (SQLException e) {
            log.log(Level.ERROR, "Can't close connection " + e);
            throw new RuntimeException("Can't close connection", e);
        }
    }

}